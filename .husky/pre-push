#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

echo "🚀 Running pre-push checks..."

protected_branch='main'
current_branch=$(git symbolic-ref HEAD | sed -e 's,.*/\(.*\),\1,')

# Check if pushing to protected branch
if [ $protected_branch = $current_branch ]; then
  echo "❌ Direct push to main branch is not allowed!"
  echo "Please create a pull request instead."
  exit 1
fi

# Run full test suite
echo "🧪 Running full test suite..."
npm test

# Build check
echo "🔨 Testing production build..."
npm run build

# Security check
echo "🛡️ Running security audit..."
npm audit --audit-level high

# Check for .env files in commit
if git log --name-only origin/$current_branch..$current_branch | grep -q "\.env"; then
  echo "❌ .env file detected in commits!"
  echo "Never commit environment files containing secrets."
  exit 1
fi

# Check branch is up to date with origin
echo "🔄 Checking if branch is up to date..."
git fetch origin
LOCAL=$(git rev-parse @)
REMOTE=$(git rev-parse "@{u}" 2>/dev/null)
BASE=$(git merge-base @ "@{u}" 2>/dev/null)

if [ $LOCAL != $REMOTE ] && [ $REMOTE != "" ]; then
  if [ $LOCAL = $BASE ]; then
    echo "⚠️  Your branch is behind origin. Pull latest changes:"
    echo "git pull origin $current_branch"
    exit 1
  elif [ $REMOTE = $BASE ]; then
    echo "✅ Your branch is ahead of origin (ready to push)"
  else
    echo "⚠️  Your branch has diverged from origin. Rebase or merge required:"
    echo "git pull --rebase origin $current_branch"
    exit 1
  fi
fi

# Database migration check
if git diff origin/$current_branch..$current_branch --name-only | grep -q "prisma/migrations"; then
  echo "🗄️ Database migrations detected"
  echo "💡 Ensure migrations are tested and compatible with production!"
  
  # Check if migration is reversible
  echo "🔄 Checking migration reversibility..."
  # This is a placeholder - implement actual reversibility check
  echo "⚠️  Manual review required for migration safety"
fi

# Performance check (if applicable)
if [ -f "lighthouse.json" ]; then
  echo "⚡ Running performance audit..."
  npx lighthouse-ci autorun
fi

# Check for TODO comments in production code
echo "📝 Checking for TODO comments..."
TODO_COUNT=$(git diff origin/$current_branch..$current_branch | grep -c "TODO\|FIXME\|HACK" || true)
if [ $TODO_COUNT -gt 5 ]; then
  echo "⚠️  High number of TODO comments ($TODO_COUNT) found"
  echo "Consider addressing them before push"
fi

# Bundle size check
if [ -d ".next" ]; then
  echo "📦 Checking bundle size..."
  BUNDLE_SIZE=$(du -sh .next/static/chunks | cut -f1)
  echo "Current bundle size: $BUNDLE_SIZE"
  
  # You can add bundle size limits here
  # if [ bundle size > limit ]; then exit 1; fi
fi

# Integration tests (if configured)
if [ -f "playwright.config.ts" ]; then
  echo "🎭 Running integration tests..."
  npx playwright test --reporter=list
fi

echo "✅ Pre-push checks completed successfully!"
echo "🎉 Ready to push to origin!"

# Reminder for pull request
if [ $current_branch != "main" ] && [ $current_branch != "develop" ]; then
  echo ""
  echo "💡 Remember to create a pull request after pushing:"
  echo "   gh pr create --title 'feat: your feature description'"
  echo "   or visit: https://github.com/your-repo/compare/$current_branch"
fi