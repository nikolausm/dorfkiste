@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject NavigationManager Navigation

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Event" Class="mr-3" />
            @ItemTitle buchen
        </MudText>
    </TitleContent>
    <DialogContent>
        <div class="rental-form">
            <!-- Item Summary -->
            <MudPaper Class="item-summary mb-4" Elevation="1">
                <div class="d-flex align-center">
                    @if (!string.IsNullOrEmpty(ItemImageUrl))
                    {
                        <MudAvatar Size="Size.Large" Class="mr-3">
                            <MudImage Src="@ItemImageUrl" Alt="@ItemTitle" />
                        </MudAvatar>
                    }
                    else
                    {
                        <MudAvatar Size="Size.Large" Class="mr-3">
                            <MudIcon Icon="@Icons.Material.Filled.Image" />
                        </MudAvatar>
                    }
                    
                    <div class="flex-grow-1">
                        <MudText Typo="Typo.h6">@ItemTitle</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">
                            @ItemOwner • @ItemLocation
                        </MudText>
                        <MudText Typo="Typo.body1" Color="Color.Success" Class="font-weight-medium">
                            @(PricePerDay?.ToString("C") ?? "Preis auf Anfrage")/Tag
                        </MudText>
                    </div>
                </div>
            </MudPaper>
            
            <!-- Rental Period -->
            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudDatePicker @bind-Date="_startDate"
                                   Label="Startdatum"
                                   MinDate="DateTime.Today"
                                   MaxDate="DateTime.Today.AddMonths(6)"
                                   Required="true"
                                   Variant="Variant.Outlined"
                                   Class="mb-3" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudDatePicker @bind-Date="_endDate"
                                   Label="Enddatum"
                                   MinDate="@(_startDate ?? DateTime.Today)"
                                   MaxDate="DateTime.Today.AddMonths(6)"
                                   Required="true"
                                   Variant="Variant.Outlined"
                                   Class="mb-3" />
                </MudItem>
            </MudGrid>
            
            <!-- Rental Type -->
            <MudRadioGroup T="RentalType" @bind-SelectedOption="_rentalType" Class="mb-3">
                <MudText Typo="Typo.subtitle2" Class="mb-2">Mietart:</MudText>
                <MudRadio T="RentalType" Option="@RentalType.Daily" Color="Color.Success">
                    Tagesweise (@(PricePerDay?.ToString("C") ?? "0,00€")/Tag)
                </MudRadio>
                @if (PricePerHour.HasValue)
                {
                    <MudRadio T="RentalType" Option="@RentalType.Hourly" Color="Color.Success">
                        Stundenweise (@PricePerHour.Value.ToString("C")/Stunde)
                    </MudRadio>
                }
            </MudRadioGroup>
            
            <!-- Time Selection for Hourly Rental -->
            @if (_rentalType == RentalType.Hourly)
            {
                <MudGrid>
                    <MudItem xs="6">
                        <MudTimePicker @bind-Time="_startTime"
                                       Label="Startzeit"
                                       Required="true"
                                       Variant="Variant.Outlined" />
                    </MudItem>
                    <MudItem xs="6">
                        <MudTimePicker @bind-Time="_endTime"
                                       Label="Endzeit"
                                       Required="true"
                                       Variant="Variant.Outlined" />
                    </MudItem>
                </MudGrid>
            }
            
            <!-- Message to Owner -->
            <MudTextField @bind-Value="_message"
                          Label="Nachricht an Vermieter (optional)"
                          Placeholder="Hallo, ich würde gerne Ihren Artikel mieten..."
                          Lines="3"
                          Variant="Variant.Outlined"
                          Class="mb-3" />
            
            <!-- Delivery Options -->
            <MudText Typo="Typo.subtitle2" Class="mb-2">Übergabe:</MudText>
            <MudRadioGroup T="DeliveryOption" @bind-SelectedOption="_deliveryOption" Class="mb-3">
                <MudRadio T="DeliveryOption" Option="@DeliveryOption.Pickup" Color="Color.Success">
                    <div class="d-flex align-center">
                        <MudIcon Icon="@Icons.Material.Filled.DirectionsWalk" Class="mr-2" />
                        Abholung vor Ort (kostenlos)
                    </div>
                </MudRadio>
                <MudRadio T="DeliveryOption" Option="@DeliveryOption.Delivery" Color="Color.Success">
                    <div class="d-flex align-center">
                        <MudIcon Icon="@Icons.Material.Filled.LocalShipping" Class="mr-2" />
                        Lieferung (+5,00€)
                    </div>
                </MudRadio>
            </MudRadioGroup>
            
            <!-- Delivery Address for Delivery Option -->
            @if (_deliveryOption == DeliveryOption.Delivery)
            {
                <MudTextField @bind-Value="_deliveryAddress"
                              Label="Lieferadresse"
                              Required="true"
                              Variant="Variant.Outlined"
                              Class="mb-3" />
            }
            
            <!-- Insurance -->
            <MudCheckBox T="bool" @bind-Checked="_includeInsurance" 
                         Color="Color.Success"
                         Class="mb-3">
                <MudText Typo="Typo.body2">
                    Versicherungsschutz hinzufügen (+@CalculateInsuranceCost().ToString("C"))
                </MudText>
                <MudText Typo="Typo.caption" Color="Color.Secondary">
                    Schützt Sie bei Schäden oder Verlust des Artikels
                </MudText>
            </MudCheckBox>
            
            <!-- Cost Summary -->
            <MudPaper Class="cost-summary" Elevation="1">
                <MudText Typo="Typo.h6" Class="mb-2">Kostenübersicht</MudText>
                <div class="cost-breakdown">
                    <div class="d-flex justify-space-between mb-1">
                        <MudText Typo="Typo.body2">Miete (@GetRentalDuration())</MudText>
                        <MudText Typo="Typo.body2">@CalculateRentalCost().ToString("C")</MudText>
                    </div>
                    @if (_deliveryOption == DeliveryOption.Delivery)
                    {
                        <div class="d-flex justify-space-between mb-1">
                            <MudText Typo="Typo.body2">Lieferung</MudText>
                            <MudText Typo="Typo.body2">5,00€</MudText>
                        </div>
                    }
                    @if (_includeInsurance)
                    {
                        <div class="d-flex justify-space-between mb-1">
                            <MudText Typo="Typo.body2">Versicherung</MudText>
                            <MudText Typo="Typo.body2">@CalculateInsuranceCost().ToString("C")</MudText>
                        </div>
                    }
                    <MudDivider Class="my-2" />
                    <div class="d-flex justify-space-between">
                        <MudText Typo="Typo.h6">Gesamtkosten</MudText>
                        <MudText Typo="Typo.h6" Color="Color.Success">@CalculateTotalCost().ToString("C")</MudText>
                    </div>
                </div>
            </MudPaper>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@Cancel">Abbrechen</MudButton>
        <MudButton Color="Color.Success" 
                   Variant="Variant.Filled" 
                   OnClick="@SubmitRental"
                   Disabled="@(!IsFormValid())">
            Jetzt buchen
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;
    
    [Parameter] public int ItemId { get; set; }
    [Parameter] public string ItemTitle { get; set; } = string.Empty;
    [Parameter] public string? ItemImageUrl { get; set; }
    [Parameter] public string ItemOwner { get; set; } = string.Empty;
    [Parameter] public string ItemLocation { get; set; } = string.Empty;
    [Parameter] public decimal? PricePerDay { get; set; }
    [Parameter] public decimal? PricePerHour { get; set; }
    [Parameter] public EventCallback<RentalRequest> OnRentalSubmitted { get; set; }

    private DateTime? _startDate = DateTime.Today.AddDays(1);
    private DateTime? _endDate = DateTime.Today.AddDays(2);
    private TimeSpan? _startTime = new TimeSpan(9, 0, 0);
    private TimeSpan? _endTime = new TimeSpan(17, 0, 0);
    private RentalType _rentalType = RentalType.Daily;
    private string _message = string.Empty;
    private DeliveryOption _deliveryOption = DeliveryOption.Pickup;
    private string _deliveryAddress = string.Empty;
    private bool _includeInsurance = false;

    protected override async Task OnInitializedAsync()
    {
        await JSRuntime.InvokeVoidAsync("console.log", $"UI-Dev: Initializing RentalForm for item {ItemId}");
        
        // Set default rental type based on available pricing
        if (PricePerDay.HasValue && !PricePerHour.HasValue)
        {
            _rentalType = RentalType.Daily;
        }
        else if (!PricePerDay.HasValue && PricePerHour.HasValue)
        {
            _rentalType = RentalType.Hourly;
        }
        
        await JSRuntime.InvokeVoidAsync("console.log", "UI-Dev: RentalForm initialized with booking form");
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task SubmitRental()
    {
        if (!IsFormValid())
        {
            Snackbar.Add("Bitte füllen Sie alle erforderlichen Felder aus", Severity.Warning);
            return;
        }

        try
        {
            var rentalRequest = new RentalRequest
            {
                ItemId = ItemId,
                StartDate = _startDate!.Value,
                EndDate = _endDate!.Value,
                StartTime = _rentalType == RentalType.Hourly ? _startTime : null,
                EndTime = _rentalType == RentalType.Hourly ? _endTime : null,
                RentalType = _rentalType,
                Message = _message,
                DeliveryOption = _deliveryOption,
                DeliveryAddress = _deliveryOption == DeliveryOption.Delivery ? _deliveryAddress : null,
                IncludeInsurance = _includeInsurance,
                TotalCost = CalculateTotalCost()
            };

            if (OnRentalSubmitted.HasDelegate)
            {
                await OnRentalSubmitted.InvokeAsync(rentalRequest);
            }

            Snackbar.Add("Buchungsanfrage wurde gesendet!", Severity.Success);
            MudDialog.Close(DialogResult.Ok(rentalRequest));
            
            await JSRuntime.InvokeVoidAsync("console.log", $"UI-Dev: Rental request submitted for item {ItemId}");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Rental submission error:", ex.Message);
            Snackbar.Add("Fehler beim Senden der Buchungsanfrage", Severity.Error);
        }
    }

    private bool IsFormValid()
    {
        return _startDate.HasValue && 
               _endDate.HasValue && 
               _startDate <= _endDate &&
               (_deliveryOption != DeliveryOption.Delivery || !string.IsNullOrWhiteSpace(_deliveryAddress)) &&
               (_rentalType != RentalType.Hourly || (_startTime.HasValue && _endTime.HasValue && _startTime < _endTime));
    }

    private string GetRentalDuration()
    {
        if (!_startDate.HasValue || !_endDate.HasValue)
            return "0 Tage";

        if (_rentalType == RentalType.Hourly && _startTime.HasValue && _endTime.HasValue)
        {
            var duration = _endTime.Value - _startTime.Value;
            var days = (_endDate.Value - _startDate.Value).Days + 1;
            return $"{days} Tag(e), {duration.TotalHours:F0} Stunden/Tag";
        }

        var totalDays = (_endDate.Value - _startDate.Value).Days + 1;
        return $"{totalDays} Tag{(totalDays == 1 ? "" : "e")}";
    }

    private decimal CalculateRentalCost()
    {
        if (!_startDate.HasValue || !_endDate.HasValue)
            return 0;

        var days = (_endDate.Value - _startDate.Value).Days + 1;

        if (_rentalType == RentalType.Hourly && PricePerHour.HasValue && _startTime.HasValue && _endTime.HasValue)
        {
            var hoursPerDay = (_endTime.Value - _startTime.Value).TotalHours;
            return (decimal)(days * hoursPerDay) * PricePerHour.Value;
        }
        else if (_rentalType == RentalType.Daily && PricePerDay.HasValue)
        {
            return days * PricePerDay.Value;
        }

        return 0;
    }

    private decimal CalculateInsuranceCost()
    {
        var rentalCost = CalculateRentalCost();
        return Math.Round(rentalCost * 0.15m, 2); // 15% of rental cost
    }

    private decimal CalculateTotalCost()
    {
        var total = CalculateRentalCost();
        
        if (_deliveryOption == DeliveryOption.Delivery)
            total += 5.00m;
            
        if (_includeInsurance)
            total += CalculateInsuranceCost();
            
        return total;
    }

    public enum RentalType
    {
        Daily,
        Hourly
    }

    public enum DeliveryOption
    {
        Pickup,
        Delivery
    }

    public class RentalRequest
    {
        public int ItemId { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
        public TimeSpan? StartTime { get; set; }
        public TimeSpan? EndTime { get; set; }
        public RentalType RentalType { get; set; }
        public string Message { get; set; } = string.Empty;
        public DeliveryOption DeliveryOption { get; set; }
        public string? DeliveryAddress { get; set; }
        public bool IncludeInsurance { get; set; }
        public decimal TotalCost { get; set; }
    }
}

<style>
    .rental-form {
        max-width: 100%;
    }

    .item-summary {
        padding: 16px;
        border-radius: 8px;
        background-color: #f8fffe;
        border: 1px solid #d1fae5;
    }

    .cost-summary {
        padding: 16px;
        border-radius: 8px;
        background-color: #f0fdf4;
        border: 1px solid #bbf7d0;
        margin-top: 16px;
    }

    .cost-breakdown {
        font-size: 0.875rem;
    }

    .mud-radio .mud-typography {
        font-size: 0.875rem;
    }

    /* Responsive adjustments */
    @@media (max-width: 600px) {
        .rental-form .mud-grid-item {
            padding: 8px 0;
        }
        
        .item-summary {
            padding: 12px;
        }
        
        .cost-summary {
            padding: 12px;
        }
        
        .item-summary .d-flex {
            flex-direction: column;
            text-align: center;
        }
        
        .item-summary .mud-avatar {
            margin: 0 auto 12px auto;
        }
    }

    /* Dark theme support */
    .mud-theme-dark .item-summary {
        background-color: #064e3b;
        border-color: #065f46;
    }

    .mud-theme-dark .cost-summary {
        background-color: #064e3b;
        border-color: #059669;
    }
</style>