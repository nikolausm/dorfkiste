@inject IJSRuntime JSRuntime
@inject IHttpClientFactory HttpClientFactory
@inject ISnackbar Snackbar
@implements IAsyncDisposable

<div class="upload-form-container">
    @if (string.IsNullOrEmpty(_previewUrl))
    {
        <!-- Upload Area -->
        <MudPaper Class="@($"upload-dropzone {(_isDragging ? "drag-over" : "")}")"
                  Elevation="0"
                  @ondrop="@HandleDrop"
                  @ondragenter="@HandleDragEnter"
                  @ondragover="@HandleDragOver"
                  @ondragleave="@HandleDragLeave">
            
            <div class="upload-content">
                <MudIcon Icon="@Icons.Material.Filled.CloudUpload" 
                         Size="Size.Large" 
                         Color="Color.Success"
                         Class="upload-icon" />
                
                <MudText Typo="Typo.h6" Class="upload-title">
                    Foto hier ablegen oder klicken zum Auswählen
                </MudText>
                
                <MudText Typo="Typo.body2" Color="Color.Secondary" Class="upload-subtitle">
                    JPG, PNG oder WebP • Max. 10MB
                </MudText>
                
                <MudButton Variant="Variant.Filled"
                           Color="Color.Success"
                           StartIcon="@Icons.Material.Filled.PhotoCamera"
                           OnClick="@OpenFileDialog"
                           Class="mt-4">
                    Foto auswählen
                </MudButton>
                
                <!-- Hidden file input -->
                <InputFile @ref="_fileInput"
                           OnChange="@HandleFileSelected"
                           accept="image/*"
                           style="display: none;" />
            </div>
        </MudPaper>
    }
    else
    {
        <!-- Preview and Analysis -->
        <div class="preview-container">
            <!-- Image Preview -->
            <MudPaper Class="image-preview" Elevation="2">
                <div class="image-container">
                    <MudImage Src="@_previewUrl" 
                              Alt="Vorschau" 
                              Class="preview-image"
                              ObjectFit="ObjectFit.Cover" />
                    
                    <MudIconButton Icon="@Icons.Material.Filled.Close"
                                   Color="Color.Error"
                                   Class="close-button"
                                   OnClick="@Reset" />
                </div>
            </MudPaper>
            
            <!-- Analysis Status -->
            @if (_isAnalyzing)
            {
                <MudPaper Class="analysis-status analyzing" Elevation="1">
                    <div class="d-flex align-center">
                        <MudProgressCircular Color="Color.Success" 
                                             Size="Size.Small" 
                                             Indeterminate="true"
                                             Class="mr-3" />
                        <div>
                            <MudText Typo="Typo.body1" Class="font-weight-medium">
                                KI analysiert Ihr Bild...
                            </MudText>
                            <MudText Typo="Typo.caption" Color="Color.Secondary">
                                Dies kann einen Moment dauern
                            </MudText>
                        </div>
                    </div>
                </MudPaper>
            }
            
            <!-- Analysis Results -->
            @if (_analysisResult != null && !_isAnalyzing)
            {
                <MudPaper Class="analysis-results" Elevation="1">
                    <div class="d-flex align-center mb-3">
                        <MudIcon Icon="@Icons.Material.Filled.Psychology" 
                                 Color="Color.Success" 
                                 Class="mr-2" />
                        <MudText Typo="Typo.h6" Color="Color.Success">
                            KI-Analyse abgeschlossen
                        </MudText>
                    </div>
                    
                    <MudGrid>
                        <MudItem xs="12" md="6">
                            <MudText Typo="Typo.subtitle2" Class="mb-1">
                                <MudIcon Icon="@Icons.Material.Filled.Label" Size="Size.Small" Class="mr-1" />
                                Erkannter Artikel:
                            </MudText>
                            <MudText Typo="Typo.body1" Class="font-weight-medium">
                                @_analysisResult.Title
                            </MudText>
                        </MudItem>
                        
                        <MudItem xs="12" md="6">
                            <MudText Typo="Typo.subtitle2" Class="mb-1">
                                <MudIcon Icon="@Icons.Material.Filled.Category" Size="Size.Small" Class="mr-1" />
                                Kategorie:
                            </MudText>
                            <MudChip T="string" Size="Size.Small" Color="Color.Primary">
                                @_analysisResult.Category
                            </MudChip>
                        </MudItem>
                        
                        <MudItem xs="12" md="6">
                            <MudText Typo="Typo.subtitle2" Class="mb-1">
                                <MudIcon Icon="@Icons.Material.Filled.Star" Size="Size.Small" Class="mr-1" />
                                Zustand:
                            </MudText>
                            <MudChip T="string" Size="Size.Small" Color="@GetConditionColor()">
                                @_analysisResult.Condition
                            </MudChip>
                        </MudItem>
                        
                        <MudItem xs="12" md="6">
                            <MudText Typo="Typo.subtitle2" Class="mb-1">
                                <MudIcon Icon="@Icons.Material.Filled.Euro" Size="Size.Small" Class="mr-1" />
                                Empfohlener Preis:
                            </MudText>
                            <MudText Typo="Typo.body1" Color="Color.Success" Class="font-weight-medium">
                                @_analysisResult.SuggestedPricePerDay?.ToString("C")/Tag
                            </MudText>
                        </MudItem>
                        
                        @if (!string.IsNullOrEmpty(_analysisResult.Description))
                        {
                            <MudItem xs="12">
                                <MudText Typo="Typo.subtitle2" Class="mb-1">
                                    <MudIcon Icon="@Icons.Material.Filled.Description" Size="Size.Small" Class="mr-1" />
                                    Beschreibung:
                                </MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">
                                    @_analysisResult.Description
                                </MudText>
                            </MudItem>
                        }
                        
                        @if (_analysisResult.Tags?.Any() == true)
                        {
                            <MudItem xs="12">
                                <MudText Typo="Typo.subtitle2" Class="mb-2">
                                    <MudIcon Icon="@Icons.Material.Filled.Tag" Size="Size.Small" Class="mr-1" />
                                    Erkannte Eigenschaften:
                                </MudText>
                                <div class="d-flex flex-wrap gap-1">
                                    @foreach (var tag in _analysisResult.Tags)
                                    {
                                        <MudChip T="string" Size="Size.Small" 
                                                 Color="Color.Secondary" 
                                                 Variant="Variant.Outlined">
                                            @tag
                                        </MudChip>
                                    }
                                </div>
                            </MudItem>
                        }
                    </MudGrid>
                    
                    <!-- Action Buttons -->
                    <div class="d-flex gap-2 mt-4">
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Success"
                                   StartIcon="@Icons.Material.Filled.Check"
                                   OnClick="@AcceptAnalysis">
                            Analyse übernehmen
                        </MudButton>
                        <MudButton Variant="Variant.Outlined"
                                   Color="Color.Secondary"
                                   StartIcon="@Icons.Material.Filled.Refresh"
                                   OnClick="@RetryAnalysis">
                            Erneut analysieren
                        </MudButton>
                        <MudButton Variant="Variant.Text"
                                   Color="Color.Error"
                                   StartIcon="@Icons.Material.Filled.Close"
                                   OnClick="@Reset">
                            Abbrechen
                        </MudButton>
                    </div>
                </MudPaper>
            }
            
            <!-- Error State -->
            @if (_hasError && !_isAnalyzing)
            {
                <MudAlert Severity="Severity.Error" Class="mt-3">
                    <div class="d-flex align-center justify-space-between">
                        <div>
                            <MudText Typo="Typo.body1">Fehler bei der Analyse</MudText>
                            <MudText Typo="Typo.caption">
                                Das Bild konnte nicht analysiert werden. Versuchen Sie es erneut oder fahren Sie ohne Analyse fort.
                            </MudText>
                        </div>
                        <MudButton Variant="Variant.Text"
                                   Color="Color.Error"
                                   OnClick="@RetryAnalysis">
                            Wiederholen
                        </MudButton>
                    </div>
                </MudAlert>
            }
        </div>
    }
</div>

@code {
    [Parameter] public EventCallback<AnalysisResult> OnAnalysisComplete { get; set; }
    [Parameter] public EventCallback<string> OnImageSelected { get; set; }
    [Parameter] public long MaxFileSize { get; set; } = 10 * 1024 * 1024; // 10MB
    [Parameter] public string[] AcceptedFileTypes { get; set; } = { "image/jpeg", "image/png", "image/webp" };

    private InputFile? _fileInput;
    private string _previewUrl = string.Empty;
    private bool _isDragging = false;
    private bool _isAnalyzing = false;
    private bool _hasError = false;
    private AnalysisResult? _analysisResult;
    private IBrowserFile? _currentFile;
    private readonly HttpClient _httpClient;

    public UploadForm()
    {
        _httpClient = new HttpClient();
    }

    protected override async Task OnInitializedAsync()
    {
        await JSRuntime.InvokeVoidAsync("console.log", "UI-Dev: Initializing UploadForm component");
        await JSRuntime.InvokeVoidAsync("console.log", "UI-Dev: UploadForm initialized with drag-drop and AI analysis");
    }

    private async Task OpenFileDialog()
    {
        await JSRuntime.InvokeVoidAsync("eval", $"document.querySelector('input[type=file]').click()");
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            await ProcessFile(file);
        }
    }

    private async Task HandleDrop(DragEventArgs e)
    {
        _isDragging = false;
        StateHasChanged();

        // Note: In a real implementation, you'd need JavaScript interop to handle file drops
        // This is a simplified version
        await JSRuntime.InvokeVoidAsync("console.log", "UI-Dev: File drop detected");
    }

    private void HandleDragEnter(DragEventArgs e)
    {
        _isDragging = true;
        StateHasChanged();
    }

    private void HandleDragOver(DragEventArgs e)
    {
        // Prevent default to allow drop
    }

    private void HandleDragLeave(DragEventArgs e)
    {
        _isDragging = false;
        StateHasChanged();
    }

    private async Task ProcessFile(IBrowserFile file)
    {
        try
        {
            // Validate file
            if (!AcceptedFileTypes.Contains(file.ContentType))
            {
                Snackbar.Add("Ungültiger Dateityp. Nur JPG, PNG und WebP sind erlaubt.", Severity.Error);
                return;
            }

            if (file.Size > MaxFileSize)
            {
                Snackbar.Add($"Datei zu groß. Maximum: {MaxFileSize / (1024 * 1024)}MB", Severity.Error);
                return;
            }

            _currentFile = file;
            _hasError = false;

            // Create preview URL
            var buffer = new byte[file.Size];
            await file.OpenReadStream(MaxFileSize).ReadAsync(buffer);
            var base64 = Convert.ToBase64String(buffer);
            _previewUrl = $"data:{file.ContentType};base64,{base64}";
            
            StateHasChanged();

            // Notify parent about image selection
            if (OnImageSelected.HasDelegate)
            {
                await OnImageSelected.InvokeAsync(_previewUrl);
            }

            // Start AI analysis
            await AnalyzeImage(base64);

            await JSRuntime.InvokeVoidAsync("console.log", $"UI-Dev: File processed: {file.Name}, Size: {file.Size} bytes");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "File processing error:", ex.Message);
            Snackbar.Add("Fehler beim Verarbeiten der Datei", Severity.Error);
            Reset();
        }
    }

    private async Task AnalyzeImage(string base64Data)
    {
        _isAnalyzing = true;
        _hasError = false;
        StateHasChanged();

        try
        {
            // Simulate AI analysis delay
            await Task.Delay(2000);

            // In a real implementation, this would call your AI service
            // For now, return mock analysis results
            _analysisResult = new AnalysisResult
            {
                Title = "Bohrmaschine mit Akkupack",
                Category = "Werkzeuge",
                Condition = "Sehr gut",
                SuggestedPricePerDay = 15.00m,
                Description = "Professionelle Akkubohrmaschine mit verschiedenen Aufsätzen und Ladegerät. Ideal für Heimwerker und kleine Projekte.",
                Tags = new[] { "Akkubetrieben", "Professionell", "Zubehör inklusive", "18V", "LED-Licht" },
                Confidence = 0.92
            };

            // Notify parent component
            if (OnAnalysisComplete.HasDelegate)
            {
                await OnAnalysisComplete.InvokeAsync(_analysisResult);
            }

            await JSRuntime.InvokeVoidAsync("console.log", "UI-Dev: AI analysis completed successfully");
        }
        catch (Exception ex)
        {
            _hasError = true;
            await JSRuntime.InvokeVoidAsync("console.error", "AI analysis error:", ex.Message);
            Snackbar.Add("Fehler bei der KI-Analyse", Severity.Error);
        }
        finally
        {
            _isAnalyzing = false;
            StateHasChanged();
        }
    }

    private async Task RetryAnalysis()
    {
        if (!string.IsNullOrEmpty(_previewUrl))
        {
            var base64Data = _previewUrl.Split(',')[1]; // Remove data URL prefix
            await AnalyzeImage(base64Data);
        }
    }

    private async Task AcceptAnalysis()
    {
        if (_analysisResult != null && OnAnalysisComplete.HasDelegate)
        {
            await OnAnalysisComplete.InvokeAsync(_analysisResult);
        }
        
        Snackbar.Add("Analyse-Ergebnisse übernommen", Severity.Success);
        await JSRuntime.InvokeVoidAsync("console.log", "UI-Dev: Analysis results accepted");
    }

    private void Reset()
    {
        _previewUrl = string.Empty;
        _analysisResult = null;
        _isAnalyzing = false;
        _hasError = false;
        _currentFile = null;
        StateHasChanged();
    }

    private Color GetConditionColor()
    {
        return _analysisResult?.Condition?.ToLower() switch
        {
            "neu" => Color.Success,
            "sehr gut" => Color.Info,
            "gut" => Color.Primary,
            "gebraucht" => Color.Warning,
            "defekt" => Color.Error,
            _ => Color.Default
        };
    }

    public async ValueTask DisposeAsync()
    {
        _httpClient?.Dispose();
        await JSRuntime.InvokeVoidAsync("console.log", "UI-Dev: UploadForm disposed");
    }

    public class AnalysisResult
    {
        public string Title { get; set; } = string.Empty;
        public string Category { get; set; } = string.Empty;
        public string Condition { get; set; } = string.Empty;
        public decimal? SuggestedPricePerDay { get; set; }
        public string Description { get; set; } = string.Empty;
        public string[] Tags { get; set; } = Array.Empty<string>();
        public double Confidence { get; set; }
    }
}

<style>
    .upload-form-container {
        width: 100%;
        max-width: 600px;
        margin: 0 auto;
    }

    .upload-dropzone {
        border: 2px dashed #d1d5db;
        border-radius: 12px;
        background-color: #fafafa;
        transition: all 0.3s ease;
        cursor: pointer;
        min-height: 250px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .upload-dropzone:hover, .upload-dropzone.drag-over {
        border-color: #22c55e;
        background-color: #f0fdf4;
        transform: scale(1.02);
    }

    .upload-content {
        text-align: center;
        padding: 32px;
    }

    .upload-icon {
        margin-bottom: 16px;
        opacity: 0.7;
    }

    .upload-title {
        margin-bottom: 8px;
        font-weight: 600;
    }

    .upload-subtitle {
        margin-bottom: 16px;
    }

    .preview-container {
        display: flex;
        flex-direction: column;
        gap: 16px;
    }

    .image-preview {
        border-radius: 12px;
        overflow: hidden;
        position: relative;
    }

    .image-container {
        position: relative;
        width: 100%;
        height: 300px;
    }

    .preview-image {
        width: 100%;
        height: 100%;
        border-radius: 12px;
    }

    .close-button {
        position: absolute;
        top: 8px;
        right: 8px;
        background-color: rgba(255, 255, 255, 0.9);
        backdrop-filter: blur(4px);
        border-radius: 50%;
    }

    .analysis-status {
        padding: 16px;
        border-radius: 8px;
    }

    .analysis-status.analyzing {
        background-color: #eff6ff;
        border: 1px solid #3b82f6;
    }

    .analysis-results {
        padding: 20px;
        border-radius: 8px;
        background-color: #f0fdf4;
        border: 1px solid #22c55e;
    }

    @@media (max-width: 600px) {
        .upload-form-container {
            max-width: 100%;
        }

        .upload-dropzone {
            min-height: 200px;
        }

        .upload-content {
            padding: 24px 16px;
        }

        .image-container {
            height: 250px;
        }

        .analysis-results {
            padding: 16px;
        }
    }

    /* Dark theme support */
    .mud-theme-dark .upload-dropzone {
        border-color: #4b5563;
        background-color: #1f2937;
    }

    .mud-theme-dark .upload-dropzone:hover,
    .mud-theme-dark .upload-dropzone.drag-over {
        border-color: #22c55e;
        background-color: #064e3b;
    }

    .mud-theme-dark .analysis-status.analyzing {
        background-color: #1e3a8a;
        border-color: #3b82f6;
    }

    .mud-theme-dark .analysis-results {
        background-color: #064e3b;
        border-color: #22c55e;
    }
</style>