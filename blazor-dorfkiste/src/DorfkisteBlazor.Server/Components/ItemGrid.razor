@using DorfkisteBlazor.Application.Features.Items.DTOs
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject NavigationManager Navigation

<div class="item-grid-container">
    
    <!-- Loading State -->
    @if (IsLoading)
    {
        <div class="loading-container">
            <MudProgressCircular Color="Color.Success" Indeterminate="true" Size="Size.Large" />
            <MudText Typo="Typo.body1" Class="mt-4">Artikel werden geladen...</MudText>
        </div>
    }
    <!-- Empty State -->
    else if (!Items.Any())
    {
        <div class="empty-state">
            <MudIcon Icon="@Icons.Material.Filled.SearchOff" Size="Size.Large" Color="Color.Secondary" />
            <MudText Typo="Typo.h6" Class="mt-4 mb-2">Keine Artikel gefunden</MudText>
            <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-4">
                Versuchen Sie es mit anderen Suchbegriffen oder Filtern.
            </MudText>
            <MudButton Variant="Variant.Filled" 
                       Color="Color.Success" 
                       StartIcon="@Icons.Material.Filled.Add"
                       Href="/items/new">
                Ersten Artikel einstellen
            </MudButton>
        </div>
    }
    <!-- Items Display -->
    else
    {
        <div class="@GetGridClass()">
            @foreach (var item in Items)
            {
                <div class="@GetItemClass()">
                    @if (_isListView)
                    {
                        <!-- List View Item -->
                        <MudCard Class="list-item-card" Elevation="1">
                            <div class="d-flex">
                                <div class="item-image-section">
                                    @if (item.Images?.Any() == true)
                                    {
                                        <MudCardMedia Image="@item.Images.First().Url" 
                                                      Alt="@item.Title" 
                                                      Height="120" 
                                                      Style="width: 160px; cursor: pointer;"
                                                      @onclick="@(() => NavigateToItem(item.Id))" />
                                    }
                                    else
                                    {
                                        <div class="list-image-placeholder" @onclick="@(() => NavigateToItem(item.Id))">
                                            <MudIcon Icon="@Icons.Material.Filled.Image" Size="Size.Large" />
                                        </div>
                                    }
                                </div>
                                <MudCardContent Class="flex-grow-1 d-flex flex-column justify-space-between">
                                    <div>
                                        <MudText Typo="Typo.h6" Class="cursor-pointer mb-2" @onclick="@(() => NavigateToItem(item.Id))">
                                            @item.Title
                                        </MudText>
                                        <div class="d-flex align-center mb-2">
                                            <MudIcon Icon="@Icons.Material.Filled.LocationOn" Size="Size.Small" Color="Color.Secondary" />
                                            <MudText Typo="Typo.body2" Class="ml-1">@item.Location</MudText>
                                            <MudChip Size="Size.Small" 
                                                     Color="@(item.Available ? Color.Success : Color.Warning)"
                                                     Text="@(item.Available ? "Verfügbar" : "Belegt")"
                                                     Class="ml-auto" />
                                        </div>
                                        <MudText Typo="Typo.body2" Color="Color.Secondary" Class="item-description">
                                            @item.Description
                                        </MudText>
                                    </div>
                                    <div class="d-flex align-center justify-space-between mt-2">
                                        <div>
                                            @if (item.PricePerDay.HasValue && item.PricePerDay > 0)
                                            {
                                                <MudText Typo="Typo.h6" Color="Color.Success">
                                                    @item.PricePerDay.Value.ToString("C")/Tag
                                                </MudText>
                                            }
                                            else
                                            {
                                                <MudText Typo="Typo.body2" Color="Color.Secondary">
                                                    Preis auf Anfrage
                                                </MudText>
                                            }
                                        </div>
                                        <MudButton Variant="Variant.Outlined" 
                                                   Color="Color.Success" 
                                                   Size="Size.Small"
                                                   OnClick="@(() => RequestRental(item.Id))"
                                                   Disabled="@(!item.Available)">
                                            Buchen
                                        </MudButton>
                                    </div>
                                </MudCardContent>
                            </div>
                        </MudCard>
                    }
                    else
                    {
                        <!-- Grid View Item -->
                        <MudCard Class="item-card" Elevation="2">
                            <div class="position-relative">
                                @if (item.Images?.Any() == true)
                                {
                                    <MudCardMedia Image="@item.Images.First().Url" 
                                                  Alt="@item.Title" 
                                                  Height="200" 
                                                  Style="cursor: pointer;"
                                                  @onclick="@(() => NavigateToItem(item.Id))" />
                                }
                                else
                                {
                                    <div class="image-placeholder" @onclick="@(() => NavigateToItem(item.Id))">
                                        <MudIcon Icon="@Icons.Material.Filled.Image" Size="Size.Large" />
                                    </div>
                                }
                                <MudChip Size="Size.Small" 
                                         Color="@(item.Available ? Color.Success : Color.Warning)"
                                         Text="@(item.Available ? "Verfügbar" : "Belegt")"
                                         Class="position-absolute" 
                                         Style="top: 8px; right: 8px;" />
                            </div>
                            <MudCardContent>
                                <MudText Typo="Typo.h6" Class="cursor-pointer mb-2" @onclick="@(() => NavigateToItem(item.Id))">
                                    @item.Title
                                </MudText>
                                <div class="d-flex align-center mb-2">
                                    <MudIcon Icon="@Icons.Material.Filled.LocationOn" Size="Size.Small" Color="Color.Secondary" />
                                    <MudText Typo="Typo.body2" Class="ml-1">@item.Location</MudText>
                                </div>
                                <MudText Typo="Typo.body2" Color="Color.Secondary" Class="item-description mb-3">
                                    @item.Description
                                </MudText>
                                <div class="d-flex align-center justify-space-between">
                                    <div>
                                        @if (item.PricePerDay.HasValue && item.PricePerDay > 0)
                                        {
                                            <MudText Typo="Typo.h6" Color="Color.Success">
                                                @item.PricePerDay.Value.ToString("C")/Tag
                                            </MudText>
                                        }
                                        else
                                        {
                                            <MudText Typo="Typo.body2" Color="Color.Secondary">
                                                Preis auf Anfrage
                                            </MudText>
                                        }
                                    </div>
                                    <MudButton Variant="Variant.Filled" 
                                               Color="Color.Success" 
                                               Size="Size.Small"
                                               OnClick="@(() => RequestRental(item.Id))"
                                               Disabled="@(!item.Available)">
                                        Buchen
                                    </MudButton>
                                </div>
                            </MudCardContent>
                        </MudCard>
                    }
                </div>
            }
        </div>
        
        <!-- Pagination -->
        @if (ShowPagination && TotalPages > 1)
        {
            <div class="pagination-container mt-6">
                <MudPagination Count="@TotalPages" 
                               @bind-Selected="@CurrentPage"
                               BoundaryCount="1"
                               MiddleCount="3"
                               ShowFirstButton="true"
                               ShowLastButton="true"
                               Color="Color.Success"
                               Size="Size.Large"
                               Class="d-flex justify-center" />
            </div>
        }
    }
</div>

<!-- Filters Dialog -->
<MudDialog @bind-Visible="@_showFilters" Options="@_filterDialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.FilterList" Class="mr-3" />
            Filter
        </MudText>
    </TitleContent>
    <DialogContent>
        <!-- Filter content would go here -->
        <MudText>Filter-Optionen werden hier implementiert...</MudText>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(() => _showFilters = false)">Abbrechen</MudButton>
        <MudButton Color="Color.Success" Variant="Variant.Filled" OnClick="@ApplyFilters">
            Filter anwenden
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter] public List<ItemDto> Items { get; set; } = new();
    [Parameter] public bool IsLoading { get; set; } = false;
    [Parameter] public bool IsGridView { get; set; } = true;
    [Parameter] public bool ShowPagination { get; set; } = true;
    [Parameter] public int CurrentPage { get; set; } = 1;
    [Parameter] public int TotalPages { get; set; } = 1;
    [Parameter] public EventCallback<int> OnPageChanged { get; set; }
    [Parameter] public EventCallback<Guid> OnFavoriteToggle { get; set; }
    [Parameter] public EventCallback<Guid> OnRentalRequest { get; set; }
    [Parameter] public EventCallback<SortOption> OnSortChanged { get; set; }

    private bool _isListView => !IsGridView;
    private bool _savedListView = false;
    private SortOption _currentSort = SortOption.Newest;
    private bool _showFilters = false;
    private List<string> ActiveFilters = new();
    
    private readonly DialogOptions _filterDialogOptions = new()
    {
        MaxWidth = MaxWidth.Small,
        FullWidth = true,
        CloseButton = true,
        DisableBackdropClick = false
    };

    protected override async Task OnInitializedAsync()
    {
        await JSRuntime.InvokeVoidAsync("console.log", "UI-Dev: Initializing ItemGrid component");
        
        // Load view preference from localStorage
        try
        {
            var savedViewMode = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "itemGrid.viewMode");
            _savedListView = savedViewMode == "list";
        }
        catch
        {
            // Ignore errors, use default
        }
        
        await JSRuntime.InvokeVoidAsync("console.log", "UI-Dev: ItemGrid initialized with responsive grid and filtering");
    }

    protected override async Task OnParametersSetAsync()
    {
        if (OnPageChanged.HasDelegate && CurrentPage > 0)
        {
            await OnPageChanged.InvokeAsync(CurrentPage);
        }
    }

    private async Task OnSortOptionChanged(SortOption newSort)
    {
        if (_currentSort != newSort)
        {
            _currentSort = newSort;
            if (OnSortChanged.HasDelegate)
            {
                await OnSortChanged.InvokeAsync(newSort);
            }
            await JSRuntime.InvokeVoidAsync("console.log", $"UI-Dev: Sort changed to {newSort}");
        }
    }

    private async Task OnViewModeChanged()
    {
        // Save preference to localStorage
        try
        {
            var viewMode = _savedListView ? "list" : "grid";
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "itemGrid.viewMode", viewMode);
        }
        catch
        {
            // Ignore errors
        }
        
        await JSRuntime.InvokeVoidAsync("console.log", $"UI-Dev: View mode changed to {(_savedListView ? "list" : "grid")}");
    }

    private string GetGridClass()
    {
        return _isListView 
            ? "list-view-container" 
            : "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4";
    }

    private string GetItemClass()
    {
        return _isListView ? "list-item" : "grid-item";
    }

    private void NavigateToItem(Guid itemId)
    {
        Navigation.NavigateTo($"/items/{itemId}");
    }

    private async Task HandleFavoriteToggle(Guid itemId)
    {
        var item = Items.FirstOrDefault(i => i.Id == itemId);
        if (item != null)
        {
            // Note: IsFavorite property doesn't exist in Application.ItemDto
            // This would need to be handled by a separate service call
            
            if (OnFavoriteToggle.HasDelegate)
            {
                await OnFavoriteToggle.InvokeAsync(itemId);
            }
            
            Snackbar.Add("Favorit-Status aktualisiert", Severity.Info);
        }
    }

    private async Task RequestRental(Guid itemId)
    {
        if (OnRentalRequest.HasDelegate)
        {
            await OnRentalRequest.InvokeAsync(itemId);
        }
        
        await JSRuntime.InvokeVoidAsync("console.log", $"UI-Dev: Rental requested for item {itemId}");
    }

    private void ShowFilters()
    {
        _showFilters = true;
    }

    private async Task ApplyFilters()
    {
        _showFilters = false;
        // Apply filter logic here
        await JSRuntime.InvokeVoidAsync("console.log", "UI-Dev: Filters applied");
    }

    private async Task RemoveFilter(string filter)
    {
        ActiveFilters.Remove(filter);
        await JSRuntime.InvokeVoidAsync("console.log", $"UI-Dev: Filter removed: {filter}");
    }

    private async Task ClearAllFilters()
    {
        ActiveFilters.Clear();
        await JSRuntime.InvokeVoidAsync("console.log", "UI-Dev: All filters cleared");
    }

    public enum SortOption
    {
        Newest,
        PriceLow,
        PriceHigh,
        Popular,
        Distance
    }

    // Using shared ItemDto from DorfkisteBlazor.Server.Shared.Dtos
}

<style>
    .item-grid-container {
        width: 100%;
    }
    
    .grid-header {
        background: white;
        border-radius: 8px;
        padding: 24px;
        margin-bottom: 24px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    }
    
    .sort-select {
        min-width: 200px;
    }
    
    .active-filters {
        display: flex;
        flex-wrap: wrap;
        align-items: center;
        padding-top: 16px;
        border-top: 1px solid rgba(0, 0, 0, 0.08);
    }
    
    .loading-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        min-height: 400px;
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    }
    
    .empty-state {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        min-height: 400px;
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        text-align: center;
        padding: 48px 24px;
    }
    
    .grid {
        display: grid;
        gap: 16px;
    }
    
    .grid-cols-1 { grid-template-columns: repeat(1, minmax(0, 1fr)); }
    
    @@media (min-width: 768px) {
        .md\\:grid-cols-2 { grid-template-columns: repeat(2, minmax(0, 1fr)); }
    }
    
    @@media (min-width: 1024px) {
        .lg\\:grid-cols-3 { grid-template-columns: repeat(3, minmax(0, 1fr)); }
    }
    
    @@media (min-width: 1280px) {
        .xl\\:grid-cols-4 { grid-template-columns: repeat(4, minmax(0, 1fr)); }
    }
    
    .list-view-container {
        display: flex;
        flex-direction: column;
        gap: 16px;
    }
    
    .list-item-card {
        transition: all 0.2s ease;
    }
    
    .list-item-card:hover {
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }
    
    .item-image-section {
        flex-shrink: 0;
    }
    
    .list-image-placeholder {
        width: 160px;
        height: 120px;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #f5f5f5;
        cursor: pointer;
    }
    
    .item-description {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
        text-overflow: ellipsis;
        line-height: 1.4;
    }
    
    .pagination-container {
        display: flex;
        justify-content: center;
        padding: 24px 0;
    }
    
    @@media (max-width: 768px) {
        .grid-header {
            padding: 16px;
        }
        
        .grid-header .d-flex {
            flex-direction: column;
            gap: 16px;
        }
        
        .sort-select {
            min-width: auto;
            width: 100%;
        }
        
        .list-item-card .d-flex {
            flex-direction: column;
        }
        
        .item-image-section {
            width: 100%;
        }
        
        .list-image-placeholder {
            width: 100%;
            height: 200px;
        }
    }
</style>