@page "/items"
@using DorfkisteBlazor.Application.Features.Items.DTOs
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar

<PageTitle>Artikel - Dorfkiste</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <!-- Header Section -->
    <div class="d-flex justify-between align-center mb-4 flex-wrap gap-2">
        <div>
            <MudText Typo="Typo.h4" Class="font-weight-bold">
                Alle Artikel
            </MudText>
            <MudText Typo="Typo.body1" Color="Color.Secondary">
                @_totalItems Artikel gefunden @(_currentSearchTerm.Length > 0 ? $"für \"{_currentSearchTerm}\"" : "")
            </MudText>
        </div>
        
        <AuthorizeView>
            <Authorized>
                <MudButton Href="/items/new"
                           Variant="Variant.Filled"
                           Color="Color.Success"
                           StartIcon="@Icons.Material.Filled.Add">
                    Artikel einstellen
                </MudButton>
            </Authorized>
        </AuthorizeView>
    </div>

    <!-- Search and Filter Section -->
    <MudPaper Class="filters-section pa-4 mb-4" Elevation="2" Style="border-radius: 12px;">
        <MudGrid Spacing="3" AlignItems="Center">
            <!-- Search -->
            <MudItem xs="12" md="4">
                <MudTextField @bind-Value="_searchTerm"
                              Label="Suche"
                              Placeholder="Nach Artikeln suchen..."
                              Variant="Variant.Outlined"
                              Adornment="Adornment.End"
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              OnAdornmentClick="HandleSearch"
                              OnKeyPress="HandleSearchKeyPress" />
            </MudItem>
            
            <!-- Category Filter -->
            <MudItem xs="12" md="3">
                <MudSelect @bind-Value="_selectedCategory"
                           Label="Kategorie"
                           Variant="Variant.Outlined"
                           AnchorOrigin="Origin.BottomCenter">
                    <MudSelectItem Value="@string.Empty">Alle Kategorien</MudSelectItem>
                    @foreach (var category in _categories)
                    {
                        <MudSelectItem Value="@category">@category</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            
            <!-- Location Filter -->
            <MudItem xs="12" md="3">
                <MudTextField @bind-Value="_locationFilter"
                              Label="Standort"
                              Placeholder="z.B. Berlin"
                              Variant="Variant.Outlined"
                              Adornment="Adornment.End"
                              AdornmentIcon="@Icons.Material.Filled.LocationOn" />
            </MudItem>
            
            <!-- Apply Filters Button -->
            <MudItem xs="12" md="2">
                <MudButton OnClick="ApplyFilters"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           FullWidth="true"
                           StartIcon="@Icons.Material.Filled.FilterList">
                    Filter
                </MudButton>
            </MudItem>
        </MudGrid>
        
        <!-- Active Filters -->
        @if (HasActiveFilters())
        {
            <MudDivider Class="my-3" />
            <div class="d-flex align-center gap-2 flex-wrap">
                <MudText Typo="Typo.body2" Color="Color.Secondary">
                    Aktive Filter:
                </MudText>
                
                @if (!string.IsNullOrEmpty(_currentSearchTerm))
                {
                    <MudChip Text="@($"Suche: {_currentSearchTerm}")"
                             OnClose="() => ClearSearchFilter()"
                             Color="Color.Primary" />
                }
                
                @if (!string.IsNullOrEmpty(_selectedCategory))
                {
                    <MudChip Text="@($"Kategorie: {_selectedCategory}")"
                             OnClose="() => ClearCategoryFilter()"
                             Color="Color.Secondary" />
                }
                
                @if (!string.IsNullOrEmpty(_locationFilter))
                {
                    <MudChip Text="@($"Standort: {_locationFilter}")"
                             OnClose="() => ClearLocationFilter()"
                             Color="Color.Info" />
                }
                
                <MudButton OnClick="ClearAllFilters"
                           Variant="Variant.Text"
                           Size="Size.Small"
                           Color="Color.Error">
                    Alle löschen
                </MudButton>
            </div>
        }
    </MudPaper>

    <!-- Sort Options -->
    <div class="d-flex justify-between align-center mb-4">
        <MudButtonGroup Variant="Variant.Outlined" Color="Color.Primary">
            <MudButton OnClick="() => ChangeSortOrder(SortOrder.Newest)"
                       Variant="@(_currentSortOrder == SortOrder.Newest ? Variant.Filled : Variant.Outlined)">
                Neueste
            </MudButton>
            <MudButton OnClick="() => ChangeSortOrder(SortOrder.PriceLowToHigh)"
                       Variant="@(_currentSortOrder == SortOrder.PriceLowToHigh ? Variant.Filled : Variant.Outlined)">
                Preis ↑
            </MudButton>
            <MudButton OnClick="() => ChangeSortOrder(SortOrder.PriceHighToLow)"
                       Variant="@(_currentSortOrder == SortOrder.PriceHighToLow ? Variant.Filled : Variant.Outlined)">
                Preis ↓
            </MudButton>
        </MudButtonGroup>
        
        <MudToggleIconButton @bind-Toggled="_isGridView"
                             Icon="@Icons.Material.Filled.ViewModule"
                             ToggledIcon="@Icons.Material.Filled.ViewList"
                             Color="Color.Primary"
                             ToggledColor="Color.Primary"
                             Title="Ansicht ändern" />
    </div>

    <!-- Loading State -->
    @if (_isLoading)
    {
        <div class="d-flex justify-center align-center" style="min-height: 300px;">
            <MudProgressCircular Color="Color.Success" Indeterminate="true" Size="Size.Large" />
        </div>
    }
    else if (_items.Count == 0)
    {
        <!-- Empty State -->
        <MudPaper Class="pa-8 text-center" Elevation="1" Style="border-radius: 12px;">
            <MudIcon Icon="@Icons.Material.Filled.SearchOff" 
                     Size="Size.Large" 
                     Color="Color.Secondary" 
                     Class="mb-4" />
            <MudText Typo="Typo.h6" Class="mb-2">
                Keine Artikel gefunden
            </MudText>
            <MudText Typo="Typo.body1" Color="Color.Secondary" Class="mb-4">
                @(HasActiveFilters() ? "Probiere andere Suchkriterien aus oder" : "")
                Sei der erste und stelle einen Artikel ein!
            </MudText>
            <AuthorizeView>
                <Authorized>
                    <MudButton Href="/items/new"
                               Variant="Variant.Filled"
                               Color="Color.Success"
                               StartIcon="@Icons.Material.Filled.Add">
                        Ersten Artikel einstellen
                    </MudButton>
                </Authorized>
                <NotAuthorized>
                    <MudButton Href="/auth/signup"
                               Variant="Variant.Outlined"
                               Color="Color.Primary">
                        Registrieren und Artikel einstellen
                    </MudButton>
                </NotAuthorized>
            </AuthorizeView>
        </MudPaper>
    }
    else
    {
        <!-- Items Grid/List -->
        <ItemGrid Items="_items" 
                  IsGridView="_isGridView"
                  ShowPagination="true"
                  CurrentPage="_currentPage"
                  TotalPages="_totalPages"
                  OnPageChanged="HandlePageChanged" />
    }
</MudContainer>

@code {
    [Parameter, SupplyParameterFromQuery] public string? Search { get; set; }
    [Parameter, SupplyParameterFromQuery] public string? Category { get; set; }
    [Parameter, SupplyParameterFromQuery] public string? Location { get; set; }
    [Parameter, SupplyParameterFromQuery] public int Page { get; set; } = 1;
    
    private bool _isLoading = true;
    private bool _isGridView = true;
    private string _searchTerm = string.Empty;
    private string _currentSearchTerm = string.Empty;
    private string _selectedCategory = string.Empty;
    private string _locationFilter = string.Empty;
    private SortOrder _currentSortOrder = SortOrder.Newest;
    
    private List<ItemDto> _items = new();
    private List<string> _categories = new();
    private int _totalItems = 0;
    private int _currentPage = 1;
    private int _totalPages = 1;
    private const int ItemsPerPage = 12;

    protected override async Task OnInitializedAsync()
    {
        await JSRuntime.InvokeVoidAsync("console.log", "UI-Dev: Initializing Items page");
        
        // Set initial values from query parameters
        _searchTerm = Search ?? string.Empty;
        _currentSearchTerm = _searchTerm;
        _selectedCategory = Category ?? string.Empty;
        _locationFilter = Location ?? string.Empty;
        _currentPage = Page > 0 ? Page : 1;
        
        LoadCategories();
        await LoadItems();
        
        _isLoading = false;
        
        await JSRuntime.InvokeVoidAsync("console.log", "UI-Dev: Items page initialized with search and filtering");
    }

    private void LoadCategories()
    {
        _categories = new List<string>
        {
            "Werkzeuge", "Garten", "Elektronik", "Sport", "Haushalt", "Bücher", "Kleidung", "Fahrzeuge", "Sonstiges"
        };
    }

    private async Task LoadItems()
    {
        try
        {
            _isLoading = true;
            StateHasChanged();
            
            // Simulate API delay
            await Task.Delay(500);
            
            // Mock data - replace with actual API call
            var allItems = GenerateMockItems();
            
            // Apply filters
            var filteredItems = allItems.AsEnumerable();
            
            if (!string.IsNullOrEmpty(_currentSearchTerm))
            {
                filteredItems = filteredItems.Where(i => 
                    i.Title.Contains(_currentSearchTerm, StringComparison.OrdinalIgnoreCase) ||
                    i.Description.Contains(_currentSearchTerm, StringComparison.OrdinalIgnoreCase));
            }
            
            if (!string.IsNullOrEmpty(_selectedCategory))
            {
                filteredItems = filteredItems.Where(i => i.CategoryName == _selectedCategory);
            }
            
            if (!string.IsNullOrEmpty(_locationFilter))
            {
                filteredItems = filteredItems.Where(i => 
                    i.Location.Contains(_locationFilter, StringComparison.OrdinalIgnoreCase));
            }
            
            // Apply sorting
            filteredItems = _currentSortOrder switch
            {
                SortOrder.Newest => filteredItems.OrderByDescending(i => i.CreatedAt),
                SortOrder.PriceLowToHigh => filteredItems.OrderBy(i => i.PricePerDay),
                SortOrder.PriceHighToLow => filteredItems.OrderByDescending(i => i.PricePerDay),
                _ => filteredItems.OrderByDescending(i => i.CreatedAt)
            };
            
            var filteredList = filteredItems.ToList();
            _totalItems = filteredList.Count;
            _totalPages = (int)Math.Ceiling((double)_totalItems / ItemsPerPage);
            
            // Apply pagination
            _items = filteredList
                .Skip((_currentPage - 1) * ItemsPerPage)
                .Take(ItemsPerPage)
                .ToList();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error loading items:", ex.Message);
            Snackbar.Add("Fehler beim Laden der Artikel", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private List<ItemDto> GenerateMockItems()
    {
        var items = new List<ItemDto>();
        var random = new Random();
        var titles = new[] { "Bohrmaschine", "Gartenmöbel", "Laptop", "Fahrrad", "Küchenmaschine", "Bücher", "Sportgeräte", "Werkzeuge" };
        var locations = new[] { "Berlin Mitte", "Hamburg", "München", "Köln", "Frankfurt", "Stuttgart", "Dresden", "Leipzig" };
        var conditions = new[] { "Neu", "Sehr gut", "Gut", "Befriedigend" };
        
        for (int i = 1; i <= 50; i++)
        {
            var title = titles[random.Next(titles.Length)];
            var category = _categories[random.Next(_categories.Count)];
            
            items.Add(new ItemDto
            {
                Id = Guid.NewGuid(),
                Title = $"{title} #{i}",
                Description = $"Beschreibung für {title} #{i}",
                Condition = conditions[random.Next(conditions.Length)],
                PricePerDay = Math.Round((decimal)(random.NextDouble() * 50 + 5), 2),
                Location = locations[random.Next(locations.Length)],
                Available = random.NextDouble() > 0.2, // 80% verfügbar
                CategoryName = category,
                Images = new List<ItemImageDto> 
                { 
                    new() { Id = Guid.NewGuid(), Url = $"/images/item{i % 10 + 1}.jpg", Order = 1 } 
                },
                CreatedAt = DateTime.Now.AddDays(-random.Next(1, 30)),
                UserId = Guid.NewGuid(),
                CategoryId = Guid.NewGuid(),
                PickupAvailable = true,
                DeliveryAvailable = random.NextDouble() > 0.5
            });
        }
        
        return items;
    }

    private async Task HandleSearch()
    {
        _currentSearchTerm = _searchTerm;
        _currentPage = 1;
        await LoadItems();
        UpdateUrl();
    }

    private async Task HandleSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await HandleSearch();
        }
    }

    private async Task ApplyFilters()
    {
        _currentSearchTerm = _searchTerm;
        _currentPage = 1;
        await LoadItems();
        UpdateUrl();
    }

    private bool HasActiveFilters()
    {
        return !string.IsNullOrEmpty(_currentSearchTerm) || 
               !string.IsNullOrEmpty(_selectedCategory) || 
               !string.IsNullOrEmpty(_locationFilter);
    }

    private async Task ClearSearchFilter()
    {
        _searchTerm = string.Empty;
        _currentSearchTerm = string.Empty;
        await LoadItems();
        UpdateUrl();
    }

    private async Task ClearCategoryFilter()
    {
        _selectedCategory = string.Empty;
        await LoadItems();
        UpdateUrl();
    }

    private async Task ClearLocationFilter()
    {
        _locationFilter = string.Empty;
        await LoadItems();
        UpdateUrl();
    }

    private async Task ClearAllFilters()
    {
        _searchTerm = string.Empty;
        _currentSearchTerm = string.Empty;
        _selectedCategory = string.Empty;
        _locationFilter = string.Empty;
        _currentPage = 1;
        await LoadItems();
        UpdateUrl();
    }

    private async Task ChangeSortOrder(SortOrder newOrder)
    {
        _currentSortOrder = newOrder;
        await LoadItems();
    }

    private async Task HandlePageChanged(int newPage)
    {
        _currentPage = newPage;
        await LoadItems();
        UpdateUrl();
    }

    private void UpdateUrl()
    {
        var query = new Dictionary<string, object?>();
        
        if (!string.IsNullOrEmpty(_currentSearchTerm))
            query["search"] = _currentSearchTerm;
        if (!string.IsNullOrEmpty(_selectedCategory))
            query["category"] = _selectedCategory;
        if (!string.IsNullOrEmpty(_locationFilter))
            query["location"] = _locationFilter;
        if (_currentPage > 1)
            query["page"] = _currentPage;
        
        Navigation.NavigateTo(Navigation.GetUriWithQueryParameters("/items", query));
    }

    private enum SortOrder
    {
        Newest,
        PriceLowToHigh,
        PriceHighToLow
    }

    // Using shared ItemDto from DorfkisteBlazor.Server.Shared.Dtos
}

<style>
    .filters-section {
        border: 1px solid rgba(34, 197, 94, 0.1);
    }
    
    .filters-section .mud-input-control {
        border-radius: 8px;
    }
    
    .mud-button-group .mud-button-outlined {
        border-radius: 8px 0 0 8px;
    }
    
    .mud-button-group .mud-button-outlined:last-child {
        border-radius: 0 8px 8px 0;
    }
    
    .mud-chip {
        border-radius: 16px;
    }
    
    @@media (max-width: 960px) {
        .d-flex.justify-between {
            flex-direction: column;
            gap: 16px;
        }
        
        .mud-button-group {
            width: 100%;
        }
        
        .mud-button-group .mud-button {
            flex: 1;
        }
    }
</style>