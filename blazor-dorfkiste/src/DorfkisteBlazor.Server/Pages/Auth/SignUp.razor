@page "/auth/signup"
@using System.ComponentModel.DataAnnotations
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar

<PageTitle>Registrieren - Dorfkiste</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="py-8">
    <MudPaper Class="pa-8" Elevation="4" Style="border-radius: 16px; border: 1px solid rgba(34, 197, 94, 0.1);">
        <!-- Header -->
        <div class="text-center mb-6">
            <MudIcon Icon="@Icons.Material.Filled.PersonAdd" 
                     Size="Size.Large" 
                     Color="Color.Success" 
                     Class="mb-3" />
            <MudText Typo="Typo.h4" Class="font-weight-bold mb-2">
                Willkommen bei Dorfkiste!
            </MudText>
            <MudText Typo="Typo.body1" Color="Color.Secondary">
                Erstelle dein kostenloses Konto
            </MudText>
        </div>

        <!-- Sign Up Form -->
        <EditForm Model="_signUpModel" OnValidSubmit="HandleSignUp">
            <DataAnnotationsValidator />
            
            <div class="d-flex gap-4 mb-4">
                <MudTextField @bind-Value="_signUpModel.FirstName"
                              For="@(() => _signUpModel.FirstName)"
                              Label="Vorname"
                              Placeholder="Max"
                              Variant="Variant.Outlined"
                              Margin="Margin.Normal"
                              FullWidth="true"
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.Filled.Person" />

                <MudTextField @bind-Value="_signUpModel.LastName"
                              For="@(() => _signUpModel.LastName)"
                              Label="Nachname"
                              Placeholder="Mustermann"
                              Variant="Variant.Outlined"
                              Margin="Margin.Normal"
                              FullWidth="true" />
            </div>

            <MudTextField @bind-Value="_signUpModel.Email"
                          For="@(() => _signUpModel.Email)"
                          Label="E-Mail-Adresse"
                          Placeholder="max@mustermann.de"
                          InputType="InputType.Email"
                          Variant="Variant.Outlined"
                          Margin="Margin.Normal"
                          FullWidth="true"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Email"
                          Class="mb-4" />

            <MudTextField @bind-Value="_signUpModel.Location"
                          For="@(() => _signUpModel.Location)"
                          Label="Standort"
                          Placeholder="z.B. Berlin"
                          Variant="Variant.Outlined"
                          Margin="Margin.Normal"
                          FullWidth="true"
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.LocationOn"
                          Class="mb-4" />

            <MudTextField @bind-Value="_signUpModel.Password"
                          For="@(() => _signUpModel.Password)"
                          Label="Passwort"
                          InputType="@_passwordInputType"
                          Placeholder="Mindestens 8 Zeichen"
                          Variant="Variant.Outlined"
                          Margin="Margin.Normal"
                          FullWidth="true"
                          Adornment="Adornment.End"
                          AdornmentIcon="@_passwordIcon"
                          OnAdornmentClick="TogglePasswordVisibility"
                          Class="mb-4" />

            <MudTextField @bind-Value="_signUpModel.ConfirmPassword"
                          For="@(() => _signUpModel.ConfirmPassword)"
                          Label="Passwort bestätigen"
                          InputType="@_confirmPasswordInputType"
                          Placeholder="Passwort wiederholen"
                          Variant="Variant.Outlined"
                          Margin="Margin.Normal"
                          FullWidth="true"
                          Adornment="Adornment.End"
                          AdornmentIcon="@_confirmPasswordIcon"
                          OnAdornmentClick="ToggleConfirmPasswordVisibility"
                          Class="mb-4" />

            <!-- Password Strength Indicator -->
            @if (!string.IsNullOrEmpty(_signUpModel.Password))
            {
                <MudCard Class="password-strength mb-4" Elevation="0">
                    <MudCardContent Class="pa-3">
                        <MudText Typo="Typo.caption" Color="Color.Secondary" Class="mb-2">
                            Passwort-Stärke: @GetPasswordStrengthText()
                        </MudText>
                        <MudProgressLinear Value="@GetPasswordStrengthValue()" 
                                           Color="@GetPasswordStrengthColor()"
                                           Size="Size.Small" />
                        <div class="mt-2">
                            @foreach (var requirement in GetPasswordRequirements())
                            {
                                <div class="d-flex align-center gap-1">
                                    <MudIcon Icon="@(requirement.IsMet ? Icons.Material.Filled.Check : Icons.Material.Filled.Close)"
                                             Size="Size.Small"
                                             Color="@(requirement.IsMet ? Color.Success : Color.Error)" />
                                    <MudText Typo="Typo.caption" 
                                             Color="@(requirement.IsMet ? Color.Success : Color.Error)">
                                        @requirement.Text
                                    </MudText>
                                </div>
                            }
                        </div>
                    </MudCardContent>
                </MudCard>
            }

            <MudCheckBox @bind-Checked="_signUpModel.AcceptTerms" 
                         For="@(() => _signUpModel.AcceptTerms)"
                         Color="Color.Success"
                         Class="mb-4">
                <MudText Typo="Typo.body2">
                    Ich akzeptiere die 
                    <MudLink Href="/legal/terms" Color="Color.Success" Target="_blank">
                        Nutzungsbedingungen
                    </MudLink>
                    und die
                    <MudLink Href="/legal/privacy" Color="Color.Success" Target="_blank">
                        Datenschutzerklärung
                    </MudLink>
                </MudText>
            </MudCheckBox>

            <MudCheckBox @bind-Checked="_signUpModel.AcceptMarketing" 
                         Color="Color.Success"
                         Class="mb-6">
                <MudText Typo="Typo.body2" Color="Color.Secondary">
                    Ich möchte über Neuigkeiten und Angebote informiert werden (optional)
                </MudText>
            </MudCheckBox>

            <MudButton ButtonType="ButtonType.Submit"
                       Variant="Variant.Filled"
                       Color="Color.Success"
                       Size="Size.Large"
                       FullWidth="true"
                       StartIcon="@Icons.Material.Filled.PersonAdd"
                       Loading="_isLoading"
                       Class="mb-4">
                Kostenloses Konto erstellen
            </MudButton>
        </EditForm>

        <!-- Divider -->
        <MudDivider Class="my-4">
            <MudText Typo="Typo.body2" Color="Color.Secondary">oder</MudText>
        </MudDivider>

        <!-- Social Sign Up -->
        <div class="d-flex flex-column gap-2 mb-4">
            <MudButton OnClick="HandleGoogleSignUp"
                       Variant="Variant.Outlined"
                       Color="Color.Primary"
                       Size="Size.Large"
                       FullWidth="true"
                       StartIcon="@Icons.Material.Filled.PersonAdd"
                       Style="border-color: #4285f4; color: #4285f4;">
                Mit Google registrieren
            </MudButton>
            
            <MudButton OnClick="HandleFacebookSignUp"
                       Variant="Variant.Outlined"
                       Color="Color.Primary"
                       Size="Size.Large"
                       FullWidth="true"
                       StartIcon="@Icons.Material.Filled.PersonAdd"
                       Style="border-color: #1877f2; color: #1877f2;">
                Mit Facebook registrieren
            </MudButton>
        </div>

        <!-- Sign In Link -->
        <div class="text-center">
            <MudText Typo="Typo.body2" Color="Color.Secondary">
                Bereits registriert?
                <MudLink Href="/auth/signin" Color="Color.Success" Class="font-weight-bold">
                    Jetzt anmelden
                </MudLink>
            </MudText>
        </div>
    </MudPaper>
</MudContainer>

@code {
    private SignUpModel _signUpModel = new();
    private bool _isLoading = false;
    private bool _passwordVisible = false;
    private bool _confirmPasswordVisible = false;
    private InputType _passwordInputType = InputType.Password;
    private InputType _confirmPasswordInputType = InputType.Password;
    private string _passwordIcon = Icons.Material.Filled.VisibilityOff;
    private string _confirmPasswordIcon = Icons.Material.Filled.VisibilityOff;

    protected override async Task OnInitializedAsync()
    {
        await JSRuntime.InvokeVoidAsync("console.log", "UI-Dev: Initializing SignUp page");
        await JSRuntime.InvokeVoidAsync("console.log", "UI-Dev: SignUp page initialized with form validation and password strength indicator");
    }

    private async Task HandleSignUp()
    {
        try
        {
            _isLoading = true;
            StateHasChanged();

            await JSRuntime.InvokeVoidAsync("console.log", $"UI-Dev: Attempting sign up for {_signUpModel.Email}");
            
            // Simulate API call
            await Task.Delay(2000);
            
            // Mock registration logic - replace with actual registration
            if (_signUpModel.Email.Contains("@") && _signUpModel.AcceptTerms)
            {
                Snackbar.Add("Konto erfolgreich erstellt! Willkommen bei Dorfkiste!", Severity.Success);
                
                // Redirect to welcome page or sign in
                Navigation.NavigateTo("/auth/welcome");
            }
            else
            {
                Snackbar.Add("Registrierung fehlgeschlagen. Bitte überprüfe deine Angaben.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Sign up error:", ex.Message);
            Snackbar.Add("Registrierung fehlgeschlagen. Bitte versuche es erneut.", Severity.Error);
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleGoogleSignUp()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("console.log", "UI-Dev: Google sign up initiated");
            Snackbar.Add("Google-Registrierung wird bald verfügbar sein", Severity.Info);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Google sign up error:", ex.Message);
            Snackbar.Add("Google-Registrierung nicht verfügbar", Severity.Error);
        }
    }

    private async Task HandleFacebookSignUp()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("console.log", "UI-Dev: Facebook sign up initiated");
            Snackbar.Add("Facebook-Registrierung wird bald verfügbar sein", Severity.Info);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Facebook sign up error:", ex.Message);
            Snackbar.Add("Facebook-Registrierung nicht verfügbar", Severity.Error);
        }
    }

    private void TogglePasswordVisibility()
    {
        if (_passwordVisible)
        {
            _passwordVisible = false;
            _passwordInputType = InputType.Password;
            _passwordIcon = Icons.Material.Filled.VisibilityOff;
        }
        else
        {
            _passwordVisible = true;
            _passwordInputType = InputType.Text;
            _passwordIcon = Icons.Material.Filled.Visibility;
        }
    }

    private void ToggleConfirmPasswordVisibility()
    {
        if (_confirmPasswordVisible)
        {
            _confirmPasswordVisible = false;
            _confirmPasswordInputType = InputType.Password;
            _confirmPasswordIcon = Icons.Material.Filled.VisibilityOff;
        }
        else
        {
            _confirmPasswordVisible = true;
            _confirmPasswordInputType = InputType.Text;
            _confirmPasswordIcon = Icons.Material.Filled.Visibility;
        }
    }

    private int GetPasswordStrengthValue()
    {
        var password = _signUpModel.Password;
        if (string.IsNullOrEmpty(password)) return 0;

        int strength = 0;
        if (password.Length >= 8) strength += 25;
        if (password.Any(char.IsUpper)) strength += 25;
        if (password.Any(char.IsLower)) strength += 25;
        if (password.Any(char.IsDigit)) strength += 15;
        if (password.Any(c => !char.IsLetterOrDigit(c))) strength += 10;

        return Math.Min(strength, 100);
    }

    private string GetPasswordStrengthText()
    {
        var value = GetPasswordStrengthValue();
        if (value < 25) return "Sehr schwach";
        if (value < 50) return "Schwach";
        if (value < 75) return "Mittel";
        if (value < 90) return "Stark";
        return "Sehr stark";
    }

    private Color GetPasswordStrengthColor()
    {
        var value = GetPasswordStrengthValue();
        if (value < 25) return Color.Error;
        if (value < 50) return Color.Warning;
        if (value < 75) return Color.Info;
        if (value < 90) return Color.Success;
        return Color.Success;
    }

    private List<PasswordRequirement> GetPasswordRequirements()
    {
        var password = _signUpModel.Password;
        return new List<PasswordRequirement>
        {
            new() { Text = "Mindestens 8 Zeichen", IsMet = password.Length >= 8 },
            new() { Text = "Mindestens ein Großbuchstabe", IsMet = password.Any(char.IsUpper) },
            new() { Text = "Mindestens ein Kleinbuchstabe", IsMet = password.Any(char.IsLower) },
            new() { Text = "Mindestens eine Zahl", IsMet = password.Any(char.IsDigit) }
        };
    }

    private class PasswordRequirement
    {
        public string Text { get; set; } = string.Empty;
        public bool IsMet { get; set; }
    }

    private class SignUpModel
    {
        [Required(ErrorMessage = "Vorname ist erforderlich")]
        [StringLength(50, ErrorMessage = "Vorname darf maximal 50 Zeichen lang sein")]
        public string FirstName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Nachname ist erforderlich")]
        [StringLength(50, ErrorMessage = "Nachname darf maximal 50 Zeichen lang sein")]
        public string LastName { get; set; } = string.Empty;

        [Required(ErrorMessage = "E-Mail-Adresse ist erforderlich")]
        [EmailAddress(ErrorMessage = "Ungültige E-Mail-Adresse")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Standort ist erforderlich")]
        [StringLength(100, ErrorMessage = "Standort darf maximal 100 Zeichen lang sein")]
        public string Location { get; set; } = string.Empty;

        [Required(ErrorMessage = "Passwort ist erforderlich")]
        [StringLength(100, MinimumLength = 8, ErrorMessage = "Passwort muss zwischen 8 und 100 Zeichen lang sein")]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "Passwort-Bestätigung ist erforderlich")]
        [Compare(nameof(Password), ErrorMessage = "Passwörter stimmen nicht überein")]
        public string ConfirmPassword { get; set; } = string.Empty;

        [Range(typeof(bool), "true", "true", ErrorMessage = "Du musst den Nutzungsbedingungen zustimmen")]
        public bool AcceptTerms { get; set; } = false;

        public bool AcceptMarketing { get; set; } = false;
    }
}

<style>
    .password-strength {
        background-color: rgba(34, 197, 94, 0.02);
        border: 1px solid rgba(34, 197, 94, 0.1);
        border-radius: 8px;
    }
    
    .mud-paper {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
    }
    
    .mud-input-control {
        border-radius: 8px;
    }
    
    .mud-input-control:focus-within {
        border-color: #22c55e;
        box-shadow: 0 0 0 2px rgba(34, 197, 94, 0.2);
    }
    
    .mud-button {
        border-radius: 8px;
        text-transform: none;
    }
    
    .mud-button.mud-button-filled-success:hover {
        background-color: #16a34a;
        box-shadow: 0 4px 8px rgba(34, 197, 94, 0.3);
    }
    
    .mud-divider {
        margin: 24px 0;
    }
    
    @@media (max-width: 600px) {
        .d-flex.gap-4 {
            flex-direction: column;
            gap: 0 !important;
        }
        
        .mud-container {
            padding-left: 16px;
            padding-right: 16px;
        }
        
        .mud-paper {
            padding: 32px 24px !important;
            margin: 16px 0;
        }
    }
    
    /* Focus styles */
    .mud-input-control:focus-within .mud-input-adornment {
        color: #22c55e;
    }
    
    .mud-checkbox.mud-checked .mud-button-root {
        color: #22c55e;
    }
    
    .mud-link:hover {
        text-decoration: underline;
    }
</style>