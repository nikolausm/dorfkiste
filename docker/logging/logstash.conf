# Logstash configuration for processing application logs

input {
  beats {
    port => 5044
  }
}

filter {
  # Parse JSON logs from Winston
  if [logtype] == "application" {
    json {
      source => "message"
    }
    
    # Parse timestamp
    date {
      match => [ "timestamp", "yyyy-MM-dd HH:mm:ss.SSS", "ISO8601" ]
      target => "@timestamp"
    }
    
    # Extract user information if present
    if [userId] {
      mutate {
        add_field => { "user.id" => "%{userId}" }
      }
    }
    
    if [email] {
      mutate {
        add_field => { "user.email" => "%{email}" }
      }
    }
    
    # Categorize log types
    if [type] {
      if [type] =~ /^security_/ {
        mutate {
          add_tag => [ "security" ]
          add_field => { "log_category" => "security" }
        }
      } else if [type] =~ /^payment_/ {
        mutate {
          add_tag => [ "payment" ]
          add_field => { "log_category" => "payment" }
        }
      } else if [type] =~ /^database_/ {
        mutate {
          add_tag => [ "database" ]
          add_field => { "log_category" => "database" }
        }
      } else if [type] =~ /^http_/ {
        mutate {
          add_tag => [ "http" ]
          add_field => { "log_category" => "http" }
        }
      }
    }
    
    # Extract error information
    if [error] {
      if [error][name] {
        mutate {
          add_field => { "error.type" => "%{[error][name]}" }
        }
      }
      if [error][message] {
        mutate {
          add_field => { "error.message" => "%{[error][message]}" }
        }
      }
      if [error][stack] {
        mutate {
          add_field => { "error.stack_trace" => "%{[error][stack]}" }
        }
      }
    }
    
    # Extract performance metrics
    if [responseTime] {
      mutate {
        convert => { "responseTime" => "integer" }
        add_field => { "performance.response_time_ms" => "%{responseTime}" }
      }
      
      # Flag slow requests
      if [responseTime] and [responseTime] > 5000 {
        mutate {
          add_tag => [ "slow_request" ]
        }
      }
    }
    
    # Extract HTTP information
    if [method] {
      mutate {
        add_field => { "http.method" => "%{method}" }
      }
    }
    
    if [url] {
      mutate {
        add_field => { "http.url" => "%{url}" }
      }
    }
    
    if [statusCode] {
      mutate {
        convert => { "statusCode" => "integer" }
        add_field => { "http.status_code" => "%{statusCode}" }
      }
      
      # Categorize by status code
      if [statusCode] >= 500 {
        mutate {
          add_tag => [ "server_error" ]
        }
      } else if [statusCode] >= 400 {
        mutate {
          add_tag => [ "client_error" ]
        }
      }
    }
    
    if [ip] {
      mutate {
        add_field => { "client.ip" => "%{ip}" }
      }
    }
    
    if [userAgent] {
      mutate {
        add_field => { "client.user_agent" => "%{userAgent}" }
      }
    }
    
    # Extract correlation ID
    if [correlationId] {
      mutate {
        add_field => { "trace.id" => "%{correlationId}" }
      }
    }
  }
  
  # Docker container logs processing
  if [container] {
    mutate {
      add_field => { "container.name" => "%{[container][name]}" }
      add_field => { "container.image" => "%{[container][image]}" }
    }
  }
  
  # GeoIP lookup for IP addresses
  if [client][ip] {
    geoip {
      source => "[client][ip]"
      target => "client.geo"
    }
  }
  
  # Remove sensitive fields
  mutate {
    remove_field => [ "password", "token", "authorization", "secret" ]
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "dorfkiste-logs-%{+yyyy.MM.dd}"
    document_type => "_doc"
  }
  
  # Debug output (remove in production)
  stdout {
    codec => rubydebug
  }
}